{
  "contractName": "ColorToken",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_color",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_color\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"name()\":{\"details\":\"Gets the token name.\",\"returns\":{\"_0\":\"string representing the token name\"}},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"returns\":{\"_0\":\"string representing the token symbol\"}},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"token.uri/123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"\\\" | \\\"token.uri/<tokenId>\\\" |=== Requirements: - `tokenId` must exist.\"},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract.\",\"returns\":{\"_0\":\"uint256 representing the total amount of tokens\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/Users/Aditi Sharma/Documents/Blockchain/smart contract essentials/nft_Color/contracts/ColorToken.sol\":\"ColorToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/Aditi Sharma/Documents/Blockchain/smart contract essentials/nft_Color/contracts/ColorToken.sol\":{\"keccak256\":\"0x6b6c1ba726dc7994d7b8b5cef2b90afba366aa14077e8009c0aae35889baafc8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09f8000399650b64ce5986a379392233a9b1c34d13839f2497c74f1dad7cbbf7\",\"dweb:/ipfs/QmRzUpC4aQ3qiceN4U1wUwz2KKDWp4t7HkwrEK6sb2Z72B\"]},\"/C/Users/Aditi Sharma/Documents/Blockchain/smart contract essentials/nft_Color/contracts/ERC721.sol\":{\"keccak256\":\"0x0ef2521be7682403585c8b50f34966030a904c882161d16e711b4be1d8c1f484\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc9eea77b2f474da67bd9c1313505decc7660cd6ddd870d64f16941d0689a8bb\",\"dweb:/ipfs/Qmd6KzRhvieozAKbfcCdhBNjQ1tLtUNtLdMX8sM1bn5htX\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f436f6c6f72546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f4354000000000000000000000000000000000000000000000000000000000000815250620000966301ffc9a760e01b6200011860201b60201c565b8160069080519060200190620000ae929190620001f0565b508060079080519060200190620000c7929190620001f0565b50620000e06380ac58cd60e01b6200011860201b60201c565b620000f8635b5e139f60e01b6200011860201b60201c565b6200011063780e9d6360e01b6200011860201b60201c565b505062000314565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000184576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017b90620002e1565b60405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023357805160ff191683800117855562000264565b8280016001018555821562000264579182015b828111156200026357825182559160200191906001019062000246565b5b50905062000273919062000277565b5090565b6200029c91905b80821115620002985760008160009055506001016200027e565b5090565b90565b6000620002ae601c8362000303565b91507f4552433136353a20696e76616c696420696e74657266616365206964000000006000830152602082019050919050565b60006020820190508181036000830152620002fc816200029f565b9050919050565b600082825260208201905092915050565b612f1380620003246000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063b88d4fde11610071578063b88d4fde1461032e578063bd11f69d1461034a578063c87b56dd1461037a578063d85d3d27146103aa578063e985e9c5146103c657610121565b80636352211e146102765780636c0360eb146102a657806370a08231146102c457806395d89b41146102f4578063a22cb4651461031257610121565b806318160ddd116100f457806318160ddd146101c057806323b872dd146101de5780632f745c59146101fa57806342842e0e1461022a5780634f6ccce71461024657610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190612164565b6103f6565b60405161014d9190612a3f565b60405180910390f35b61015e61045d565b60405161016b9190612a5a565b60405180910390f35b61018e600480360381019061018991906121f7565b6104ff565b60405161019b91906129d8565b60405180910390f35b6101be60048036038101906101b99190612128565b610584565b005b6101c861069c565b6040516101d59190612c7c565b60405180910390f35b6101f860048036038101906101f39190612022565b6106ad565b005b610214600480360381019061020f9190612128565b61070d565b6040516102219190612c7c565b60405180910390f35b610244600480360381019061023f9190612022565b610768565b005b610260600480360381019061025b91906121f7565b610788565b60405161026d9190612c7c565b60405180910390f35b610290600480360381019061028b91906121f7565b6107ab565b60405161029d91906129d8565b60405180910390f35b6102ae6107e2565b6040516102bb9190612a5a565b60405180910390f35b6102de60048036038101906102d99190611fbd565b610884565b6040516102eb9190612c7c565b60405180910390f35b6102fc610943565b6040516103099190612a5a565b60405180910390f35b61032c600480360381019061032791906120ec565b6109e5565b005b61034860048036038101906103439190612071565b610b66565b005b610364600480360381019061035f91906121f7565b610bc8565b6040516103719190612a5a565b60405180910390f35b610394600480360381019061038f91906121f7565b610c81565b6040516103a19190612a5a565b60405180910390f35b6103c460048036038101906103bf91906121b6565b610e0c565b005b6103e060048036038101906103db9190611fe6565b610f0c565b6040516103ed9190612a3f565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f55780601f106104ca576101008083540402835291602001916104f5565b820191906000526020600020905b8154815290600101906020018083116104d857829003601f168201915b5050505050905090565b600061050a82610fa0565b610549576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054090612bdc565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061058f826107ab565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f790612c3c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661061f610fbd565b73ffffffffffffffffffffffffffffffffffffffff16148061064e575061064d81610648610fbd565b610f0c565b5b61068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068490612b3c565b60405180910390fd5b6106978383610fc5565b505050565b60006106a8600261107e565b905090565b6106be6106b8610fbd565b82611093565b6106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490612c5c565b60405180910390fd5b610708838383611171565b505050565b600061076082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061138890919063ffffffff16565b905092915050565b61078383838360405180602001604052806000815250610b66565b505050565b60008061079f8360026113a290919063ffffffff16565b50905080915050919050565b60006107db82604051806060016040528060298152602001612eb56029913960026113d19092919063ffffffff16565b9050919050565b606060098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561087a5780601f1061084f5761010080835404028352916020019161087a565b820191906000526020600020905b81548152906001019060200180831161085d57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90612b5c565b60405180910390fd5b61093c600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206113f0565b9050919050565b606060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109db5780601f106109b0576101008083540402835291602001916109db565b820191906000526020600020905b8154815290600101906020018083116109be57829003601f168201915b5050505050905090565b6109ed610fbd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5290612afc565b60405180910390fd5b8060056000610a68610fbd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610b15610fbd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b5a9190612a3f565b60405180910390a35050565b610b77610b71610fbd565b83611093565b610bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad90612c5c565b60405180910390fd5b610bc284848484611405565b50505050565b600a8181548110610bd557fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b505050505081565b6060610c8c82610fa0565b610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290612c1c565b60405180910390fd5b6060600860008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d745780601f10610d4957610100808354040283529160200191610d74565b820191906000526020600020905b815481529060010190602001808311610d5757829003601f168201915b50505050509050600060098054600181600116156101000203166002900490501415610da35780915050610e07565b600081511115610dd857600981604051602001610dc19291906129b4565b604051602081830303815290604052915050610e07565b6009610de384611461565b604051602001610df49291906129b4565b6040516020818303038152906040529150505b919050565b60001515600b82604051610e20919061299d565b908152602001604051809103902060009054906101000a900460ff16151514610e7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7590612b7c565b60405180910390fd5b600a81908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610eb9929190611e07565b5060006001600a80549050039050610ed133826115a8565b6001600b83604051610ee3919061299d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610fb682600261173690919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611038836107ab565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061108c82600001611750565b9050919050565b600061109e82610fa0565b6110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d490612b1c565b60405180910390fd5b60006110e8836107ab565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061115757508373ffffffffffffffffffffffffffffffffffffffff1661113f846104ff565b73ffffffffffffffffffffffffffffffffffffffff16145b8061116857506111678185610f0c565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611191826107ab565b73ffffffffffffffffffffffffffffffffffffffff16146111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90612bfc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124e90612adc565b60405180910390fd5b611262838383611761565b61126d600082610fc5565b6112be81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061176690919063ffffffff16565b5061131081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061178090919063ffffffff16565b506113278183600261179a9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061139783600001836117cf565b60001c905092915050565b6000806000806113b5866000018661183c565b915091508160001c8160001c8090509350935050509250929050565b60006113e4846000018460001b846118bf565b60001c90509392505050565b60006113fe82600001611950565b9050919050565b611410848484611171565b61141c84848484611961565b61145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145290612a9c565b60405180910390fd5b50505050565b606060008214156114a9576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506115a3565b600082905060005b600082146114d3578080600101915050600a82816114cb57fe5b0491506114b1565b60608167ffffffffffffffff811180156114ec57600080fd5b506040519080825280601f01601f19166020018201604052801561151f5781602001600182028036833780820191505090505b50905060006001830390508593505b6000841461159b57600a848161154057fe5b0660300160f81b8282806001900393508151811061155a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a848161159357fe5b04935061152e565b819450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160f90612bbc565b60405180910390fd5b61162181610fa0565b15611661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165890612abc565b60405180910390fd5b61166d60008383611761565b6116be81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061178090919063ffffffff16565b506116d58183600261179a9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000611748836000018360001b611b42565b905092915050565b600081600001805490509050919050565b505050565b6000611778836000018360001b611b65565b905092915050565b6000611792836000018360001b611c4d565b905092915050565b60006117c6846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b611cbd565b90509392505050565b60008183600001805490501161181a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181190612a7c565b60405180910390fd5b82600001828154811061182957fe5b9060005260206000200154905092915050565b60008082846000018054905011611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187f90612b9c565b60405180910390fd5b600084600001848154811061189957fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390611921576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119189190612a5a565b60405180910390fd5b5084600001600182038154811061193457fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006119828473ffffffffffffffffffffffffffffffffffffffff16611d99565b61198f5760019050611b3a565b600060608573ffffffffffffffffffffffffffffffffffffffff1663150b7a0260e01b6119ba610fbd565b8988886040516024016119d094939291906129f3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611a3a9190612986565b6000604051808303816000865af19150503d8060008114611a77576040519150601f19603f3d011682016040523d82523d6000602084013e611a7c565b606091505b509150915081611ad457600081511115611a995780518082602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acb90612a9c565b60405180910390fd5b600081806020019051810190611aea919061218d565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161493505050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114611c415760006001820390506000600186600001805490500390506000866000018281548110611bb057fe5b9060005260206000200154905080876000018481548110611bcd57fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480611c0557fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611c47565b60009150505b92915050565b6000611c598383611de4565b611cb2578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611cb7565b600090505b92915050565b6000808460010160008581526020019081526020016000205490506000811415611d6457846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050611d92565b82856000016001830381548110611d7757fe5b90600052602060002090600202016001018190555060009150505b9392505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f9150808214158015611ddb57506000801b8214155b92505050919050565b600080836001016000848152602001908152602001600020541415905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e4857805160ff1916838001178555611e76565b82800160010185558215611e76579182015b82811115611e75578251825591602001919060010190611e5a565b5b509050611e839190611e87565b5090565b611ea991905b80821115611ea5576000816000905550600101611e8d565b5090565b90565b600081359050611ebb81612e58565b92915050565b600081359050611ed081612e6f565b92915050565b600081359050611ee581612e86565b92915050565b600081519050611efa81612e86565b92915050565b600082601f830112611f1157600080fd5b8135611f24611f1f82612cc4565b612c97565b91508082526020830160208301858383011115611f4057600080fd5b611f4b838284612e05565b50505092915050565b600082601f830112611f6557600080fd5b8135611f78611f7382612cf0565b612c97565b91508082526020830160208301858383011115611f9457600080fd5b611f9f838284612e05565b50505092915050565b600081359050611fb781612e9d565b92915050565b600060208284031215611fcf57600080fd5b6000611fdd84828501611eac565b91505092915050565b60008060408385031215611ff957600080fd5b600061200785828601611eac565b925050602061201885828601611eac565b9150509250929050565b60008060006060848603121561203757600080fd5b600061204586828701611eac565b935050602061205686828701611eac565b925050604061206786828701611fa8565b9150509250925092565b6000806000806080858703121561208757600080fd5b600061209587828801611eac565b94505060206120a687828801611eac565b93505060406120b787828801611fa8565b925050606085013567ffffffffffffffff8111156120d457600080fd5b6120e087828801611f00565b91505092959194509250565b600080604083850312156120ff57600080fd5b600061210d85828601611eac565b925050602061211e85828601611ec1565b9150509250929050565b6000806040838503121561213b57600080fd5b600061214985828601611eac565b925050602061215a85828601611fa8565b9150509250929050565b60006020828403121561217657600080fd5b600061218484828501611ed6565b91505092915050565b60006020828403121561219f57600080fd5b60006121ad84828501611eeb565b91505092915050565b6000602082840312156121c857600080fd5b600082013567ffffffffffffffff8111156121e257600080fd5b6121ee84828501611f54565b91505092915050565b60006020828403121561220957600080fd5b600061221784828501611fa8565b91505092915050565b61222981612d91565b82525050565b61223881612d7f565b82525050565b61224781612da3565b82525050565b600061225882612d31565b6122628185612d47565b9350612272818560208601612e14565b61227b81612e47565b840191505092915050565b600061229182612d31565b61229b8185612d58565b93506122ab818560208601612e14565b80840191505092915050565b60006122c282612d3c565b6122cc8185612d63565b93506122dc818560208601612e14565b6122e581612e47565b840191505092915050565b60006122fb82612d3c565b6123058185612d74565b9350612315818560208601612e14565b80840191505092915050565b60008154600181166000811461233e5760018114612363576123a7565b607f600283041661234f8187612d74565b955060ff19831686528086019350506123a7565b600282046123718187612d74565b955061237c85612d1c565b60005b8281101561239e5781548189015260018201915060208101905061237f565b82880195505050505b505092915050565b60006123bc602283612d63565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612422603283612d63565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000612488601c83612d63565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006124c8602483612d63565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061252e601983612d63565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b600061256e602c83612d63565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006125d4603883612d63565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061263a602a83612d63565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006126a0601a83612d63565b91507f436f6c6f7220746f6b656e20616c7265616479206578697374730000000000006000830152602082019050919050565b60006126e0602283612d63565b91507f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612746602083612d63565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000612786602c83612d63565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006127ec602983612d63565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612852602f83612d63565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b60006128b8602183612d63565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061291e603183612d63565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b61298081612dfb565b82525050565b60006129928284612286565b915081905092915050565b60006129a982846122f0565b915081905092915050565b60006129c08285612321565b91506129cc82846122f0565b91508190509392505050565b60006020820190506129ed600083018461222f565b92915050565b6000608082019050612a086000830187612220565b612a15602083018661222f565b612a226040830185612977565b8181036060830152612a34818461224d565b905095945050505050565b6000602082019050612a54600083018461223e565b92915050565b60006020820190508181036000830152612a7481846122b7565b905092915050565b60006020820190508181036000830152612a95816123af565b9050919050565b60006020820190508181036000830152612ab581612415565b9050919050565b60006020820190508181036000830152612ad58161247b565b9050919050565b60006020820190508181036000830152612af5816124bb565b9050919050565b60006020820190508181036000830152612b1581612521565b9050919050565b60006020820190508181036000830152612b3581612561565b9050919050565b60006020820190508181036000830152612b55816125c7565b9050919050565b60006020820190508181036000830152612b758161262d565b9050919050565b60006020820190508181036000830152612b9581612693565b9050919050565b60006020820190508181036000830152612bb5816126d3565b9050919050565b60006020820190508181036000830152612bd581612739565b9050919050565b60006020820190508181036000830152612bf581612779565b9050919050565b60006020820190508181036000830152612c15816127df565b9050919050565b60006020820190508181036000830152612c3581612845565b9050919050565b60006020820190508181036000830152612c55816128ab565b9050919050565b60006020820190508181036000830152612c7581612911565b9050919050565b6000602082019050612c916000830184612977565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612cba57600080fd5b8060405250919050565b600067ffffffffffffffff821115612cdb57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115612d0757600080fd5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612d8a82612ddb565b9050919050565b6000612d9c82612ddb565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612e32578082015181840152602081019050612e17565b83811115612e41576000848401525b50505050565b6000601f19601f8301169050919050565b612e6181612d7f565b8114612e6c57600080fd5b50565b612e7881612da3565b8114612e8357600080fd5b50565b612e8f81612daf565b8114612e9a57600080fd5b50565b612ea681612dfb565b8114612eb157600080fd5b5056fe4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea2646970667358221220ec18037d1fc3b0f6b25a4a1c32bf0cbf85c5f0d0c5f6dfad9c348fc47832621f64736f6c63430006090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063b88d4fde11610071578063b88d4fde1461032e578063bd11f69d1461034a578063c87b56dd1461037a578063d85d3d27146103aa578063e985e9c5146103c657610121565b80636352211e146102765780636c0360eb146102a657806370a08231146102c457806395d89b41146102f4578063a22cb4651461031257610121565b806318160ddd116100f457806318160ddd146101c057806323b872dd146101de5780632f745c59146101fa57806342842e0e1461022a5780634f6ccce71461024657610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190612164565b6103f6565b60405161014d9190612a3f565b60405180910390f35b61015e61045d565b60405161016b9190612a5a565b60405180910390f35b61018e600480360381019061018991906121f7565b6104ff565b60405161019b91906129d8565b60405180910390f35b6101be60048036038101906101b99190612128565b610584565b005b6101c861069c565b6040516101d59190612c7c565b60405180910390f35b6101f860048036038101906101f39190612022565b6106ad565b005b610214600480360381019061020f9190612128565b61070d565b6040516102219190612c7c565b60405180910390f35b610244600480360381019061023f9190612022565b610768565b005b610260600480360381019061025b91906121f7565b610788565b60405161026d9190612c7c565b60405180910390f35b610290600480360381019061028b91906121f7565b6107ab565b60405161029d91906129d8565b60405180910390f35b6102ae6107e2565b6040516102bb9190612a5a565b60405180910390f35b6102de60048036038101906102d99190611fbd565b610884565b6040516102eb9190612c7c565b60405180910390f35b6102fc610943565b6040516103099190612a5a565b60405180910390f35b61032c600480360381019061032791906120ec565b6109e5565b005b61034860048036038101906103439190612071565b610b66565b005b610364600480360381019061035f91906121f7565b610bc8565b6040516103719190612a5a565b60405180910390f35b610394600480360381019061038f91906121f7565b610c81565b6040516103a19190612a5a565b60405180910390f35b6103c460048036038101906103bf91906121b6565b610e0c565b005b6103e060048036038101906103db9190611fe6565b610f0c565b6040516103ed9190612a3f565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f55780601f106104ca576101008083540402835291602001916104f5565b820191906000526020600020905b8154815290600101906020018083116104d857829003601f168201915b5050505050905090565b600061050a82610fa0565b610549576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054090612bdc565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061058f826107ab565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f790612c3c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661061f610fbd565b73ffffffffffffffffffffffffffffffffffffffff16148061064e575061064d81610648610fbd565b610f0c565b5b61068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068490612b3c565b60405180910390fd5b6106978383610fc5565b505050565b60006106a8600261107e565b905090565b6106be6106b8610fbd565b82611093565b6106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490612c5c565b60405180910390fd5b610708838383611171565b505050565b600061076082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061138890919063ffffffff16565b905092915050565b61078383838360405180602001604052806000815250610b66565b505050565b60008061079f8360026113a290919063ffffffff16565b50905080915050919050565b60006107db82604051806060016040528060298152602001612eb56029913960026113d19092919063ffffffff16565b9050919050565b606060098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561087a5780601f1061084f5761010080835404028352916020019161087a565b820191906000526020600020905b81548152906001019060200180831161085d57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90612b5c565b60405180910390fd5b61093c600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206113f0565b9050919050565b606060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109db5780601f106109b0576101008083540402835291602001916109db565b820191906000526020600020905b8154815290600101906020018083116109be57829003601f168201915b5050505050905090565b6109ed610fbd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5290612afc565b60405180910390fd5b8060056000610a68610fbd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610b15610fbd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b5a9190612a3f565b60405180910390a35050565b610b77610b71610fbd565b83611093565b610bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad90612c5c565b60405180910390fd5b610bc284848484611405565b50505050565b600a8181548110610bd557fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b505050505081565b6060610c8c82610fa0565b610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290612c1c565b60405180910390fd5b6060600860008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d745780601f10610d4957610100808354040283529160200191610d74565b820191906000526020600020905b815481529060010190602001808311610d5757829003601f168201915b50505050509050600060098054600181600116156101000203166002900490501415610da35780915050610e07565b600081511115610dd857600981604051602001610dc19291906129b4565b604051602081830303815290604052915050610e07565b6009610de384611461565b604051602001610df49291906129b4565b6040516020818303038152906040529150505b919050565b60001515600b82604051610e20919061299d565b908152602001604051809103902060009054906101000a900460ff16151514610e7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7590612b7c565b60405180910390fd5b600a81908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610eb9929190611e07565b5060006001600a80549050039050610ed133826115a8565b6001600b83604051610ee3919061299d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610fb682600261173690919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611038836107ab565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061108c82600001611750565b9050919050565b600061109e82610fa0565b6110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d490612b1c565b60405180910390fd5b60006110e8836107ab565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061115757508373ffffffffffffffffffffffffffffffffffffffff1661113f846104ff565b73ffffffffffffffffffffffffffffffffffffffff16145b8061116857506111678185610f0c565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611191826107ab565b73ffffffffffffffffffffffffffffffffffffffff16146111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90612bfc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124e90612adc565b60405180910390fd5b611262838383611761565b61126d600082610fc5565b6112be81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061176690919063ffffffff16565b5061131081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061178090919063ffffffff16565b506113278183600261179a9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061139783600001836117cf565b60001c905092915050565b6000806000806113b5866000018661183c565b915091508160001c8160001c8090509350935050509250929050565b60006113e4846000018460001b846118bf565b60001c90509392505050565b60006113fe82600001611950565b9050919050565b611410848484611171565b61141c84848484611961565b61145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145290612a9c565b60405180910390fd5b50505050565b606060008214156114a9576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506115a3565b600082905060005b600082146114d3578080600101915050600a82816114cb57fe5b0491506114b1565b60608167ffffffffffffffff811180156114ec57600080fd5b506040519080825280601f01601f19166020018201604052801561151f5781602001600182028036833780820191505090505b50905060006001830390508593505b6000841461159b57600a848161154057fe5b0660300160f81b8282806001900393508151811061155a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a848161159357fe5b04935061152e565b819450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160f90612bbc565b60405180910390fd5b61162181610fa0565b15611661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165890612abc565b60405180910390fd5b61166d60008383611761565b6116be81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061178090919063ffffffff16565b506116d58183600261179a9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000611748836000018360001b611b42565b905092915050565b600081600001805490509050919050565b505050565b6000611778836000018360001b611b65565b905092915050565b6000611792836000018360001b611c4d565b905092915050565b60006117c6846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b611cbd565b90509392505050565b60008183600001805490501161181a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181190612a7c565b60405180910390fd5b82600001828154811061182957fe5b9060005260206000200154905092915050565b60008082846000018054905011611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187f90612b9c565b60405180910390fd5b600084600001848154811061189957fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390611921576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119189190612a5a565b60405180910390fd5b5084600001600182038154811061193457fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006119828473ffffffffffffffffffffffffffffffffffffffff16611d99565b61198f5760019050611b3a565b600060608573ffffffffffffffffffffffffffffffffffffffff1663150b7a0260e01b6119ba610fbd565b8988886040516024016119d094939291906129f3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611a3a9190612986565b6000604051808303816000865af19150503d8060008114611a77576040519150601f19603f3d011682016040523d82523d6000602084013e611a7c565b606091505b509150915081611ad457600081511115611a995780518082602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acb90612a9c565b60405180910390fd5b600081806020019051810190611aea919061218d565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161493505050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114611c415760006001820390506000600186600001805490500390506000866000018281548110611bb057fe5b9060005260206000200154905080876000018481548110611bcd57fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480611c0557fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611c47565b60009150505b92915050565b6000611c598383611de4565b611cb2578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611cb7565b600090505b92915050565b6000808460010160008581526020019081526020016000205490506000811415611d6457846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050611d92565b82856000016001830381548110611d7757fe5b90600052602060002090600202016001018190555060009150505b9392505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f9150808214158015611ddb57506000801b8214155b92505050919050565b600080836001016000848152602001908152602001600020541415905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e4857805160ff1916838001178555611e76565b82800160010185558215611e76579182015b82811115611e75578251825591602001919060010190611e5a565b5b509050611e839190611e87565b5090565b611ea991905b80821115611ea5576000816000905550600101611e8d565b5090565b90565b600081359050611ebb81612e58565b92915050565b600081359050611ed081612e6f565b92915050565b600081359050611ee581612e86565b92915050565b600081519050611efa81612e86565b92915050565b600082601f830112611f1157600080fd5b8135611f24611f1f82612cc4565b612c97565b91508082526020830160208301858383011115611f4057600080fd5b611f4b838284612e05565b50505092915050565b600082601f830112611f6557600080fd5b8135611f78611f7382612cf0565b612c97565b91508082526020830160208301858383011115611f9457600080fd5b611f9f838284612e05565b50505092915050565b600081359050611fb781612e9d565b92915050565b600060208284031215611fcf57600080fd5b6000611fdd84828501611eac565b91505092915050565b60008060408385031215611ff957600080fd5b600061200785828601611eac565b925050602061201885828601611eac565b9150509250929050565b60008060006060848603121561203757600080fd5b600061204586828701611eac565b935050602061205686828701611eac565b925050604061206786828701611fa8565b9150509250925092565b6000806000806080858703121561208757600080fd5b600061209587828801611eac565b94505060206120a687828801611eac565b93505060406120b787828801611fa8565b925050606085013567ffffffffffffffff8111156120d457600080fd5b6120e087828801611f00565b91505092959194509250565b600080604083850312156120ff57600080fd5b600061210d85828601611eac565b925050602061211e85828601611ec1565b9150509250929050565b6000806040838503121561213b57600080fd5b600061214985828601611eac565b925050602061215a85828601611fa8565b9150509250929050565b60006020828403121561217657600080fd5b600061218484828501611ed6565b91505092915050565b60006020828403121561219f57600080fd5b60006121ad84828501611eeb565b91505092915050565b6000602082840312156121c857600080fd5b600082013567ffffffffffffffff8111156121e257600080fd5b6121ee84828501611f54565b91505092915050565b60006020828403121561220957600080fd5b600061221784828501611fa8565b91505092915050565b61222981612d91565b82525050565b61223881612d7f565b82525050565b61224781612da3565b82525050565b600061225882612d31565b6122628185612d47565b9350612272818560208601612e14565b61227b81612e47565b840191505092915050565b600061229182612d31565b61229b8185612d58565b93506122ab818560208601612e14565b80840191505092915050565b60006122c282612d3c565b6122cc8185612d63565b93506122dc818560208601612e14565b6122e581612e47565b840191505092915050565b60006122fb82612d3c565b6123058185612d74565b9350612315818560208601612e14565b80840191505092915050565b60008154600181166000811461233e5760018114612363576123a7565b607f600283041661234f8187612d74565b955060ff19831686528086019350506123a7565b600282046123718187612d74565b955061237c85612d1c565b60005b8281101561239e5781548189015260018201915060208101905061237f565b82880195505050505b505092915050565b60006123bc602283612d63565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612422603283612d63565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000612488601c83612d63565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006124c8602483612d63565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061252e601983612d63565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b600061256e602c83612d63565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006125d4603883612d63565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061263a602a83612d63565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006126a0601a83612d63565b91507f436f6c6f7220746f6b656e20616c7265616479206578697374730000000000006000830152602082019050919050565b60006126e0602283612d63565b91507f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612746602083612d63565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000612786602c83612d63565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006127ec602983612d63565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612852602f83612d63565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b60006128b8602183612d63565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061291e603183612d63565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b61298081612dfb565b82525050565b60006129928284612286565b915081905092915050565b60006129a982846122f0565b915081905092915050565b60006129c08285612321565b91506129cc82846122f0565b91508190509392505050565b60006020820190506129ed600083018461222f565b92915050565b6000608082019050612a086000830187612220565b612a15602083018661222f565b612a226040830185612977565b8181036060830152612a34818461224d565b905095945050505050565b6000602082019050612a54600083018461223e565b92915050565b60006020820190508181036000830152612a7481846122b7565b905092915050565b60006020820190508181036000830152612a95816123af565b9050919050565b60006020820190508181036000830152612ab581612415565b9050919050565b60006020820190508181036000830152612ad58161247b565b9050919050565b60006020820190508181036000830152612af5816124bb565b9050919050565b60006020820190508181036000830152612b1581612521565b9050919050565b60006020820190508181036000830152612b3581612561565b9050919050565b60006020820190508181036000830152612b55816125c7565b9050919050565b60006020820190508181036000830152612b758161262d565b9050919050565b60006020820190508181036000830152612b9581612693565b9050919050565b60006020820190508181036000830152612bb5816126d3565b9050919050565b60006020820190508181036000830152612bd581612739565b9050919050565b60006020820190508181036000830152612bf581612779565b9050919050565b60006020820190508181036000830152612c15816127df565b9050919050565b60006020820190508181036000830152612c3581612845565b9050919050565b60006020820190508181036000830152612c55816128ab565b9050919050565b60006020820190508181036000830152612c7581612911565b9050919050565b6000602082019050612c916000830184612977565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612cba57600080fd5b8060405250919050565b600067ffffffffffffffff821115612cdb57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115612d0757600080fd5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612d8a82612ddb565b9050919050565b6000612d9c82612ddb565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612e32578082015181840152602081019050612e17565b83811115612e41576000848401525b50505050565b6000601f19601f8301169050919050565b612e6181612d7f565b8114612e6c57600080fd5b50565b612e7881612da3565b8114612e8357600080fd5b50565b612e8f81612daf565b8114612e9a57600080fd5b50565b612ea681612dfb565b8114612eb157600080fd5b5056fe4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea2646970667358221220ec18037d1fc3b0f6b25a4a1c32bf0cbf85c5f0d0c5f6dfad9c348fc47832621f64736f6c63430006090033",
  "immutableReferences": {},
  "sourceMap": "123:483:0:-:0;;;219:53;;;;;;;;;;40259:373:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10371:40;10028:10;10390:20;;10371:18;;;:40;;:::i;:::-;40340:4;40332:5;:12;;;;;;;;;;;;:::i;:::-;;40365:6;40355:7;:16;;;;;;;;;;;;:::i;:::-;;40462:40;39517:10;40481:20;;40462:18;;;:40;;:::i;:::-;40513:49;39858:10;40532:29;;40513:18;;;:49;;:::i;:::-;40573:51;40240:10;40592:31;;40573:18;;;:51;;:::i;:::-;40259:373;;123:483:0;;11125:201:1;11224:10;11209:25;;:11;:25;;;;;11201:66;;;;;;;;;;;;;;;;;;;;;;11314:4;11278:20;:33;11299:11;11278:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;11125:201;:::o;123:483:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6:328:-1:-;;166:67;230:2;225:3;166:67;;;159:74;;266:30;262:1;257:3;253:11;246:51;325:2;320:3;316:12;309:19;;152:182;;;;342:416;;542:2;531:9;527:18;519:26;;592:9;586:4;582:20;578:1;567:9;563:17;556:47;617:131;743:4;617:131;;;609:139;;513:245;;;;766:163;;881:6;876:3;869:19;918:4;913:3;909:14;894:29;;862:67;;;;;123:483:0;;;;;;;",
  "deployedSourceMap": "123:483:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10576:142:1;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;41564:92;;;:::i;:::-;;;;;;;;;;;;;;;;46348:213;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;45665:390;;;;;;;;;;;;;;;;:::i;:::-;;44521:203;;;:::i;:::-;;;;;;;;;;;;;;;;48096:305;;;;;;;;;;;;;;;;:::i;:::-;;44208:154;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;49063:151;;;;;;;;;;;;;;;;:::i;:::-;;45070:164;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;41284:169;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;43737:89;;;:::i;:::-;;;;;;;;;;;;;;;;40843:215;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;41771:96;;;:::i;:::-;;;;;;;;;;;;;;;;46868:295;;;;;;;;;;;;;;;;:::i;:::-;;49951:285;;;;;;;;;;;;;;;;:::i;:::-;;157:22:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;42743:755:1;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;301:302:0;;;;;;;;;;;;;;;;:::i;:::-;;47493:156:1;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;10576:142;10653:4;10677:20;:33;10698:11;10677:33;;;;;;;;;;;;;;;;;;;;;;;;;;;10670:40;;10576:142;;;:::o;41564:92::-;41610:13;41643:5;41636:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41564:92;:::o;46348:213::-;46416:7;46444:16;46452:7;46444;:16::i;:::-;46436:73;;;;;;;;;;;;;;;;;;;;;;46529:15;:24;46545:7;46529:24;;;;;;;;;;;;;;;;;;;;;46522:31;;46348:213;;;:::o;45665:390::-;45746:13;45762:16;45770:7;45762;:16::i;:::-;45746:32;;45803:5;45797:11;;:2;:11;;;;45789:57;;;;;;;;;;;;;;;;;;;;;;45883:5;45867:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;45892:37;45909:5;45916:12;:10;:12::i;:::-;45892:16;:37::i;:::-;45867:62;45859:154;;;;;;;;;;;;;;;;;;;;;;46026:21;46035:2;46039:7;46026:8;:21::i;:::-;45665:390;;;:::o;44521:203::-;44574:7;44695:21;:12;:19;:21::i;:::-;44688:28;;44521:203;:::o;48096:305::-;48257:41;48276:12;:10;:12::i;:::-;48290:7;48257:18;:41::i;:::-;48249:103;;;;;;;;;;;;;;;;;;;;;;48365:28;48375:4;48381:2;48385:7;48365:9;:28::i;:::-;48096:305;;;:::o;44208:154::-;44297:7;44324:30;44348:5;44324:13;:20;44338:5;44324:20;;;;;;;;;;;;;;;:23;;:30;;;;:::i;:::-;44317:37;;44208:154;;;;:::o;49063:151::-;49167:39;49184:4;49190:2;49194:7;49167:39;;;;;;;;;;;;:16;:39::i;:::-;49063:151;;;:::o;45070:164::-;45137:7;45158:15;45179:22;45195:5;45179:12;:15;;:22;;;;:::i;:::-;45157:44;;;45219:7;45212:14;;;45070:164;;;:::o;41284:169::-;41348:7;41375:70;41392:7;41375:70;;;;;;;;;;;;;;;;;:12;:16;;:70;;;;;:::i;:::-;41368:77;;41284:169;;;:::o;43737:89::-;43777:13;43810:8;43803:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43737:89;:::o;40843:215::-;40907:7;40952:1;40935:19;;:5;:19;;;;40927:74;;;;;;;;;;;;;;;;;;;;;;41021:29;:13;:20;41035:5;41021:20;;;;;;;;;;;;;;;:27;:29::i;:::-;41014:36;;40843:215;;;:::o;41771:96::-;41819:13;41852:7;41845:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41771:96;:::o;46868:295::-;46983:12;:10;:12::i;:::-;46971:24;;:8;:24;;;;46963:62;;;;;;;;;;;;;;;;;;;;;;47083:8;47038:18;:32;47057:12;:10;:12::i;:::-;47038:32;;;;;;;;;;;;;;;:42;47071:8;47038:42;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;47136:8;47107:48;;47122:12;:10;:12::i;:::-;47107:48;;;47146:8;47107:48;;;;;;;;;;;;;;;46868:295;;:::o;49951:285::-;50083:41;50102:12;:10;:12::i;:::-;50116:7;50083:18;:41::i;:::-;50075:103;;;;;;;;;;;;;;;;;;;;;;50189:39;50203:4;50209:2;50213:7;50222:5;50189:13;:39::i;:::-;49951:285;;;;:::o;157:22:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;42743:755:1:-;42808:13;42842:16;42850:7;42842;:16::i;:::-;42834:76;;;;;;;;;;;;;;;;;;;;;;42923:23;42949:10;:19;42960:7;42949:19;;;;;;;;;;;42923:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43070:1;43050:8;43044:22;;;;;;;;;;;;;;;;:27;43040:76;;;43095:9;43088:16;;;;;43040:76;43246:1;43226:9;43220:23;:27;43216:112;;;43295:8;43305:9;43278:37;;;;;;;;;;;;;;;;;;;;;;;43264:52;;;;;43216:112;43460:8;43470:18;:7;:16;:18::i;:::-;43443:46;;;;;;;;;;;;;;;;;;;;;;;43429:61;;;42743:755;;;;:::o;301:302:0:-;405:5;383:27;;:12;396:6;383:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;375:65;;;;;;;;;;;;;;;;;;;;;;445:6;457;445:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;469:8;496:1;480:6;:13;;;;:17;469:28;;502:22;508:10;520:3;502:5;:22::i;:::-;552:4;529:12;542:6;529:20;;;;;;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;301:302;;:::o;47493:156:1:-;47582:4;47606:18;:25;47625:5;47606:25;;;;;;;;;;;;;;;:35;47632:8;47606:35;;;;;;;;;;;;;;;;;;;;;;;;;47599:42;;47493:156;;;;:::o;51429:119::-;51486:4;51510:30;51532:7;51510:12;:21;;:30;;;;:::i;:::-;51503:37;;51429:119;;;:::o;836:106::-;889:15;924:10;917:17;;836:106;:::o;58631:158::-;58724:2;58697:15;:24;58713:7;58697:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;58773:7;58769:2;58742:39;;58751:16;58759:7;58751;:16::i;:::-;58742:39;;;;;;;;;;;;58631:158;;:::o;34743:123::-;34812:7;34839:19;34847:3;:10;;34839:7;:19::i;:::-;34832:26;;34743:123;;;:::o;51918:333::-;52003:4;52028:16;52036:7;52028;:16::i;:::-;52020:73;;;;;;;;;;;;;;;;;;;;;;52104:13;52120:16;52128:7;52120;:16::i;:::-;52104:32;;52166:5;52155:16;;:7;:16;;;:51;;;;52199:7;52175:31;;:20;52187:7;52175:11;:20::i;:::-;:31;;;52155:51;:87;;;;52210:32;52227:5;52234:7;52210:16;:32::i;:::-;52155:87;52147:96;;;51918:333;;;;:::o;55517:574::-;55635:4;55615:24;;:16;55623:7;55615;:16::i;:::-;:24;;;55607:78;;;;;;;;;;;;;;;;;;;;;;55718:1;55704:16;;:2;:16;;;;55696:65;;;;;;;;;;;;;;;;;;;;;;55774:39;55795:4;55801:2;55805:7;55774:20;:39::i;:::-;55878:29;55895:1;55899:7;55878:8;:29::i;:::-;55920:35;55947:7;55920:13;:19;55934:4;55920:19;;;;;;;;;;;;;;;:26;;:35;;;;:::i;:::-;;55966:30;55988:7;55966:13;:17;55980:2;55966:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;56009:29;56026:7;56035:2;56009:12;:16;;:29;;;;;:::i;:::-;;56075:7;56071:2;56056:27;;56065:4;56056:27;;;;;;;;;;;;55517:574;;;:::o;27350:137::-;27421:7;27456:22;27460:3;:10;;27472:5;27456:3;:22::i;:::-;27448:31;;27441:38;;27350:137;;;;:::o;35205:227::-;35285:7;35294;35315:11;35328:13;35345:22;35349:3;:10;;35361:5;35345:3;:22::i;:::-;35314:53;;;;35394:3;35386:12;;35416:5;35408:14;;35378:46;;;;;;;;;35205:227;;;;;:::o;35867:204::-;35974:7;36017:44;36022:3;:10;;36042:3;36034:12;;36048;36017:4;:44::i;:::-;36009:53;;35994:69;;35867:204;;;;;:::o;26892:114::-;26952:7;26979:19;26987:3;:10;;26979:7;:19::i;:::-;26972:26;;26892:114;;;:::o;50955:272::-;51069:28;51079:4;51085:2;51089:7;51069:9;:28::i;:::-;51116:48;51139:4;51145:2;51149:7;51158:5;51116:22;:48::i;:::-;51108:111;;;;;;;;;;;;;;;;;;;;;;50955:272;;;;:::o;36310:744::-;36366:13;36596:1;36587:5;:10;36583:53;;;36614:10;;;;;;;;;;;;;;;;;;;;;36583:53;36646:12;36661:5;36646:20;;36677:14;36702:78;36717:1;36709:4;:9;36702:78;;36735:8;;;;;;;36766:2;36758:10;;;;;;;;;36702:78;;;36790:19;36822:6;36812:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36790:39;;36840:13;36865:1;36856:6;:10;36840:26;;36884:5;36877:12;;36900:115;36915:1;36907:4;:9;36900:115;;36974:2;36967:4;:9;;;;;;36962:2;:14;36951:27;;36933:6;36940:7;;;;;;;36933:15;;;;;;;;;;;:45;;;;;;;;;;;37001:2;36993:10;;;;;;;;;36900:115;;;37039:6;37025:21;;;;;;36310:744;;;;:::o;54019:404::-;54113:1;54099:16;;:2;:16;;;;54091:61;;;;;;;;;;;;;;;;;;;;;;54172:16;54180:7;54172;:16::i;:::-;54171:17;54163:58;;;;;;;;;;;;;;;;;;;;;;54234:45;54263:1;54267:2;54271:7;54234:20;:45::i;:::-;54292:30;54314:7;54292:13;:17;54306:2;54292:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;54335:29;54352:7;54361:2;54335:12;:16;;:29;;;;;:::i;:::-;;54407:7;54403:2;54382:33;;54399:1;54382:33;;;;;;;;;;;;54019:404;;:::o;34504:151::-;34588:4;34612:35;34622:3;:10;;34642:3;34634:12;;34612:9;:35::i;:::-;34605:42;;34504:151;;;;:::o;32126:110::-;32182:7;32209:3;:12;;:19;;;;32202:26;;32126:110;;;:::o;59361:93::-;;;;:::o;26437:137::-;26507:4;26531:35;26539:3;:10;;26559:5;26551:14;;26531:7;:35::i;:::-;26524:42;;26437:137;;;;:::o;26130:131::-;26197:4;26221:32;26226:3;:10;;26246:5;26238:14;;26221:4;:32::i;:::-;26214:39;;26130:131;;;;:::o;33936:176::-;34025:4;34049:55;34054:3;:10;;34074:3;34066:12;;34096:5;34088:14;;34080:23;;34049:4;:55::i;:::-;34042:62;;33936:176;;;;;:::o;24014:204::-;24081:7;24130:5;24109:3;:11;;:18;;;;:26;24101:73;;;;;;;;;;;;;;;;;;;;;;24192:3;:11;;24204:5;24192:18;;;;;;;;;;;;;;;;24185:25;;24014:204;;;;:::o;32591:279::-;32658:7;32667;32717:5;32695:3;:12;;:19;;;;:27;32687:74;;;;;;;;;;;;;;;;;;;;;;32774:22;32799:3;:12;;32812:5;32799:19;;;;;;;;;;;;;;;;;;32774:44;;32837:5;:10;;;32849:5;:12;;;32829:33;;;;;32591:279;;;;;:::o;33293:319::-;33387:7;33407:16;33426:3;:12;;:17;33439:3;33426:17;;;;;;;;;;;;33407:36;;33474:1;33462:8;:13;;33477:12;33454:36;;;;;;;;;;;;;;;;;;;;;;;;;33544:3;:12;;33568:1;33557:8;:12;33544:26;;;;;;;;;;;;;;;;;;:33;;;33537:40;;;33293:319;;;;;:::o;23561:109::-;23617:7;23644:3;:11;;:18;;;;23637:25;;23561:109;;;:::o;57545:1078::-;57666:4;57693:15;:2;:13;;;:15::i;:::-;57688:60;;57732:4;57725:11;;;;57688:60;57819:12;57833:23;57860:2;:7;;57905:45;;;57965:12;:10;:12::i;:::-;57992:4;58011:7;58033:5;57868:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;57860:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;57818:232;;;;58066:7;58061:555;;58114:1;58094:10;:17;:21;58090:384;;;58262:10;58256:17;58323:15;58310:10;58306:2;58302:19;58295:44;58210:148;58398:60;;;;;;;;;;;;;;;;;;;58061:555;58506:13;58533:10;58522:32;;;;;;;;;;;;;;58506:48;;37815:10;58587:16;;58577:26;;;:6;:26;;;;58569:35;;;;;57545:1078;;;;;;;:::o;31906:125::-;31977:4;32022:1;32001:3;:12;;:17;32014:3;32001:17;;;;;;;;;;;;:22;;31994:29;;31906:125;;;;:::o;21716:1544::-;21782:4;21900:18;21921:3;:12;;:19;21934:5;21921:19;;;;;;;;;;;;21900:40;;21971:1;21957:10;:15;21953:1300;;22319:21;22356:1;22343:10;:14;22319:38;;22372:17;22413:1;22392:3;:11;;:18;;;;:22;22372:42;;22659:17;22679:3;:11;;22691:9;22679:22;;;;;;;;;;;;;;;;22659:42;;22825:9;22796:3;:11;;22808:13;22796:26;;;;;;;;;;;;;;;:38;;;;22944:1;22928:13;:17;22902:3;:12;;:23;22915:9;22902:23;;;;;;;;;;;:43;;;;23054:3;:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;23149:3;:12;;:19;23162:5;23149:19;;;;;;;;;;;23142:26;;;23192:4;23185:11;;;;;;;;21953:1300;23236:5;23229:12;;;21716:1544;;;;;:::o;21126:414::-;21189:4;21211:21;21221:3;21226:5;21211:9;:21::i;:::-;21206:327;;21249:3;:11;;21266:5;21249:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21432:3;:11;;:18;;;;21410:3;:12;;:19;21423:5;21410:19;;;;;;;;;;;:40;;;;21472:4;21465:11;;;;21206:327;21516:5;21509:12;;21126:414;;;;;:::o;29406:692::-;29482:4;29598:16;29617:3;:12;;:17;29630:3;29617:17;;;;;;;;;;;;29598:36;;29663:1;29651:8;:13;29647:444;;;29718:3;:12;;29736:38;;;;;;;;29753:3;29736:38;;;;29766:5;29736:38;;;29718:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29933:3;:12;;:19;;;;29913:3;:12;;:17;29926:3;29913:17;;;;;;;;;;;:39;;;;29974:4;29967:11;;;;;29647:444;30047:5;30011:3;:12;;30035:1;30024:8;:12;30011:26;;;;;;;;;;;;;;;;;;:33;;:41;;;;30074:5;30067:12;;;29406:692;;;;;;:::o;17479:619::-;17539:4;17801:16;17828:19;17850:66;17828:88;;;;18019:7;18007:20;17995:32;;18059:11;18047:8;:23;;:42;;;;;18086:3;18074:15;;:8;:15;;18047:42;18039:51;;;;17479:619;;;:::o;23346:129::-;23419:4;23466:1;23443:3;:12;;:19;23456:5;23443:19;;;;;;;;;;;;:24;;23436:31;;23346:129;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;142:124;;219:6;206:20;197:29;;231:30;255:5;231:30;;;191:75;;;;;273:128;;352:6;339:20;330:29;;364:32;390:5;364:32;;;324:77;;;;;408:132;;491:6;485:13;476:22;;503:32;529:5;503:32;;;470:70;;;;;548:440;;649:3;642:4;634:6;630:17;626:27;616:2;;667:1;664;657:12;616:2;704:6;691:20;726:64;741:48;782:6;741:48;;;726:64;;;717:73;;810:6;803:5;796:21;846:4;838:6;834:17;879:4;872:5;868:16;914:3;905:6;900:3;896:16;893:25;890:2;;;931:1;928;921:12;890:2;941:41;975:6;970:3;965;941:41;;;609:379;;;;;;;;997:442;;1099:3;1092:4;1084:6;1080:17;1076:27;1066:2;;1117:1;1114;1107:12;1066:2;1154:6;1141:20;1176:65;1191:49;1233:6;1191:49;;;1176:65;;;1167:74;;1261:6;1254:5;1247:21;1297:4;1289:6;1285:17;1330:4;1323:5;1319:16;1365:3;1356:6;1351:3;1347:16;1344:25;1341:2;;;1382:1;1379;1372:12;1341:2;1392:41;1426:6;1421:3;1416;1392:41;;;1059:380;;;;;;;;1447:130;;1527:6;1514:20;1505:29;;1539:33;1566:5;1539:33;;;1499:78;;;;;1584:241;;1688:2;1676:9;1667:7;1663:23;1659:32;1656:2;;;1704:1;1701;1694:12;1656:2;1739:1;1756:53;1801:7;1792:6;1781:9;1777:22;1756:53;;;1746:63;;1718:97;1650:175;;;;;1832:366;;;1953:2;1941:9;1932:7;1928:23;1924:32;1921:2;;;1969:1;1966;1959:12;1921:2;2004:1;2021:53;2066:7;2057:6;2046:9;2042:22;2021:53;;;2011:63;;1983:97;2111:2;2129:53;2174:7;2165:6;2154:9;2150:22;2129:53;;;2119:63;;2090:98;1915:283;;;;;;2205:491;;;;2343:2;2331:9;2322:7;2318:23;2314:32;2311:2;;;2359:1;2356;2349:12;2311:2;2394:1;2411:53;2456:7;2447:6;2436:9;2432:22;2411:53;;;2401:63;;2373:97;2501:2;2519:53;2564:7;2555:6;2544:9;2540:22;2519:53;;;2509:63;;2480:98;2609:2;2627:53;2672:7;2663:6;2652:9;2648:22;2627:53;;;2617:63;;2588:98;2305:391;;;;;;2703:721;;;;;2867:3;2855:9;2846:7;2842:23;2838:33;2835:2;;;2884:1;2881;2874:12;2835:2;2919:1;2936:53;2981:7;2972:6;2961:9;2957:22;2936:53;;;2926:63;;2898:97;3026:2;3044:53;3089:7;3080:6;3069:9;3065:22;3044:53;;;3034:63;;3005:98;3134:2;3152:53;3197:7;3188:6;3177:9;3173:22;3152:53;;;3142:63;;3113:98;3270:2;3259:9;3255:18;3242:32;3294:18;3286:6;3283:30;3280:2;;;3326:1;3323;3316:12;3280:2;3346:62;3400:7;3391:6;3380:9;3376:22;3346:62;;;3336:72;;3221:193;2829:595;;;;;;;;3431:360;;;3549:2;3537:9;3528:7;3524:23;3520:32;3517:2;;;3565:1;3562;3555:12;3517:2;3600:1;3617:53;3662:7;3653:6;3642:9;3638:22;3617:53;;;3607:63;;3579:97;3707:2;3725:50;3767:7;3758:6;3747:9;3743:22;3725:50;;;3715:60;;3686:95;3511:280;;;;;;3798:366;;;3919:2;3907:9;3898:7;3894:23;3890:32;3887:2;;;3935:1;3932;3925:12;3887:2;3970:1;3987:53;4032:7;4023:6;4012:9;4008:22;3987:53;;;3977:63;;3949:97;4077:2;4095:53;4140:7;4131:6;4120:9;4116:22;4095:53;;;4085:63;;4056:98;3881:283;;;;;;4171:239;;4274:2;4262:9;4253:7;4249:23;4245:32;4242:2;;;4290:1;4287;4280:12;4242:2;4325:1;4342:52;4386:7;4377:6;4366:9;4362:22;4342:52;;;4332:62;;4304:96;4236:174;;;;;4417:261;;4531:2;4519:9;4510:7;4506:23;4502:32;4499:2;;;4547:1;4544;4537:12;4499:2;4582:1;4599:63;4654:7;4645:6;4634:9;4630:22;4599:63;;;4589:73;;4561:107;4493:185;;;;;4685:347;;4799:2;4787:9;4778:7;4774:23;4770:32;4767:2;;;4815:1;4812;4805:12;4767:2;4878:1;4867:9;4863:17;4850:31;4901:18;4893:6;4890:30;4887:2;;;4933:1;4930;4923:12;4887:2;4953:63;5008:7;4999:6;4988:9;4984:22;4953:63;;;4943:73;;4829:193;4761:271;;;;;5039:241;;5143:2;5131:9;5122:7;5118:23;5114:32;5111:2;;;5159:1;5156;5149:12;5111:2;5194:1;5211:53;5256:7;5247:6;5236:9;5232:22;5211:53;;;5201:63;;5173:97;5105:175;;;;;5287:137;5386:32;5412:5;5386:32;;;5381:3;5374:45;5368:56;;;5431:113;5514:24;5532:5;5514:24;;;5509:3;5502:37;5496:48;;;5551:104;5628:21;5643:5;5628:21;;;5623:3;5616:34;5610:45;;;5662:343;;5772:38;5804:5;5772:38;;;5822:70;5885:6;5880:3;5822:70;;;5815:77;;5897:52;5942:6;5937:3;5930:4;5923:5;5919:16;5897:52;;;5970:29;5992:6;5970:29;;;5965:3;5961:39;5954:46;;5752:253;;;;;;6012:356;;6140:38;6172:5;6140:38;;;6190:88;6271:6;6266:3;6190:88;;;6183:95;;6283:52;6328:6;6323:3;6316:4;6309:5;6305:16;6283:52;;;6356:6;6351:3;6347:16;6340:23;;6120:248;;;;;;6375:347;;6487:39;6520:5;6487:39;;;6538:71;6602:6;6597:3;6538:71;;;6531:78;;6614:52;6659:6;6654:3;6647:4;6640:5;6636:16;6614:52;;;6687:29;6709:6;6687:29;;;6682:3;6678:39;6671:46;;6467:255;;;;;;6729:360;;6859:39;6892:5;6859:39;;;6910:89;6992:6;6987:3;6910:89;;;6903:96;;7004:52;7049:6;7044:3;7037:4;7030:5;7026:16;7004:52;;;7077:6;7072:3;7068:16;7061:23;;6839:250;;;;;;7121:884;;7258:5;7252:12;7292:1;7281:9;7277:17;7305:1;7300:268;;;;7579:1;7574:425;;;;7270:729;;7300:268;7378:4;7374:1;7363:9;7359:17;7355:28;7397:89;7479:6;7474:3;7397:89;;;7390:96;;7524:4;7520:9;7509;7505:25;7500:3;7493:38;7554:6;7549:3;7545:16;7538:23;;7307:261;7300:268;;7574:425;7643:1;7632:9;7628:17;7659:89;7741:6;7736:3;7659:89;;;7652:96;;7770:38;7802:5;7770:38;;;7824:1;7832:130;7846:6;7843:1;7840:13;7832:130;;;7911:7;7905:14;7901:1;7896:3;7892:11;7885:35;7952:1;7943:7;7939:15;7928:26;;7868:4;7865:1;7861:12;7856:17;;7832:130;;;7985:6;7980:3;7976:16;7969:23;;7581:418;;;7270:729;;7228:777;;;;;;8014:371;;8174:67;8238:2;8233:3;8174:67;;;8167:74;;8274:34;8270:1;8265:3;8261:11;8254:55;8343:4;8338:2;8333:3;8329:12;8322:26;8376:2;8371:3;8367:12;8360:19;;8160:225;;;;8394:387;;8554:67;8618:2;8613:3;8554:67;;;8547:74;;8654:34;8650:1;8645:3;8641:11;8634:55;8723:20;8718:2;8713:3;8709:12;8702:42;8772:2;8767:3;8763:12;8756:19;;8540:241;;;;8790:328;;8950:67;9014:2;9009:3;8950:67;;;8943:74;;9050:30;9046:1;9041:3;9037:11;9030:51;9109:2;9104:3;9100:12;9093:19;;8936:182;;;;9127:373;;9287:67;9351:2;9346:3;9287:67;;;9280:74;;9387:34;9383:1;9378:3;9374:11;9367:55;9456:6;9451:2;9446:3;9442:12;9435:28;9491:2;9486:3;9482:12;9475:19;;9273:227;;;;9509:325;;9669:67;9733:2;9728:3;9669:67;;;9662:74;;9769:27;9765:1;9760:3;9756:11;9749:48;9825:2;9820:3;9816:12;9809:19;;9655:179;;;;9843:381;;10003:67;10067:2;10062:3;10003:67;;;9996:74;;10103:34;10099:1;10094:3;10090:11;10083:55;10172:14;10167:2;10162:3;10158:12;10151:36;10215:2;10210:3;10206:12;10199:19;;9989:235;;;;10233:393;;10393:67;10457:2;10452:3;10393:67;;;10386:74;;10493:34;10489:1;10484:3;10480:11;10473:55;10562:26;10557:2;10552:3;10548:12;10541:48;10617:2;10612:3;10608:12;10601:19;;10379:247;;;;10635:379;;10795:67;10859:2;10854:3;10795:67;;;10788:74;;10895:34;10891:1;10886:3;10882:11;10875:55;10964:12;10959:2;10954:3;10950:12;10943:34;11005:2;11000:3;10996:12;10989:19;;10781:233;;;;11023:326;;11183:67;11247:2;11242:3;11183:67;;;11176:74;;11283:28;11279:1;11274:3;11270:11;11263:49;11340:2;11335:3;11331:12;11324:19;;11169:180;;;;11358:371;;11518:67;11582:2;11577:3;11518:67;;;11511:74;;11618:34;11614:1;11609:3;11605:11;11598:55;11687:4;11682:2;11677:3;11673:12;11666:26;11720:2;11715:3;11711:12;11704:19;;11504:225;;;;11738:332;;11898:67;11962:2;11957:3;11898:67;;;11891:74;;11998:34;11994:1;11989:3;11985:11;11978:55;12061:2;12056:3;12052:12;12045:19;;11884:186;;;;12079:381;;12239:67;12303:2;12298:3;12239:67;;;12232:74;;12339:34;12335:1;12330:3;12326:11;12319:55;12408:14;12403:2;12398:3;12394:12;12387:36;12451:2;12446:3;12442:12;12435:19;;12225:235;;;;12469:378;;12629:67;12693:2;12688:3;12629:67;;;12622:74;;12729:34;12725:1;12720:3;12716:11;12709:55;12798:11;12793:2;12788:3;12784:12;12777:33;12838:2;12833:3;12829:12;12822:19;;12615:232;;;;12856:384;;13016:67;13080:2;13075:3;13016:67;;;13009:74;;13116:34;13112:1;13107:3;13103:11;13096:55;13185:17;13180:2;13175:3;13171:12;13164:39;13231:2;13226:3;13222:12;13215:19;;13002:238;;;;13249:370;;13409:67;13473:2;13468:3;13409:67;;;13402:74;;13509:34;13505:1;13500:3;13496:11;13489:55;13578:3;13573:2;13568:3;13564:12;13557:25;13610:2;13605:3;13601:12;13594:19;;13395:224;;;;13628:386;;13788:67;13852:2;13847:3;13788:67;;;13781:74;;13888:34;13884:1;13879:3;13875:11;13868:55;13957:19;13952:2;13947:3;13943:12;13936:41;14005:2;14000:3;13996:12;13989:19;;13774:240;;;;14022:113;14105:24;14123:5;14105:24;;;14100:3;14093:37;14087:48;;;14142:271;;14295:93;14384:3;14375:6;14295:93;;;14288:100;;14405:3;14398:10;;14276:137;;;;;14420:275;;14575:95;14666:3;14657:6;14575:95;;;14568:102;;14687:3;14680:10;;14556:139;;;;;14702:430;;14902:92;14990:3;14981:6;14902:92;;;14895:99;;15012:95;15103:3;15094:6;15012:95;;;15005:102;;15124:3;15117:10;;14883:249;;;;;;15139:222;;15266:2;15255:9;15251:18;15243:26;;15280:71;15348:1;15337:9;15333:17;15324:6;15280:71;;;15237:124;;;;;15368:672;;15613:3;15602:9;15598:19;15590:27;;15628:87;15712:1;15701:9;15697:17;15688:6;15628:87;;;15726:72;15794:2;15783:9;15779:18;15770:6;15726:72;;;15809;15877:2;15866:9;15862:18;15853:6;15809:72;;;15929:9;15923:4;15919:20;15914:2;15903:9;15899:18;15892:48;15954:76;16025:4;16016:6;15954:76;;;15946:84;;15584:456;;;;;;;;16047:210;;16168:2;16157:9;16153:18;16145:26;;16182:65;16244:1;16233:9;16229:17;16220:6;16182:65;;;16139:118;;;;;16264:310;;16411:2;16400:9;16396:18;16388:26;;16461:9;16455:4;16451:20;16447:1;16436:9;16432:17;16425:47;16486:78;16559:4;16550:6;16486:78;;;16478:86;;16382:192;;;;;16581:416;;16781:2;16770:9;16766:18;16758:26;;16831:9;16825:4;16821:20;16817:1;16806:9;16802:17;16795:47;16856:131;16982:4;16856:131;;;16848:139;;16752:245;;;;17004:416;;17204:2;17193:9;17189:18;17181:26;;17254:9;17248:4;17244:20;17240:1;17229:9;17225:17;17218:47;17279:131;17405:4;17279:131;;;17271:139;;17175:245;;;;17427:416;;17627:2;17616:9;17612:18;17604:26;;17677:9;17671:4;17667:20;17663:1;17652:9;17648:17;17641:47;17702:131;17828:4;17702:131;;;17694:139;;17598:245;;;;17850:416;;18050:2;18039:9;18035:18;18027:26;;18100:9;18094:4;18090:20;18086:1;18075:9;18071:17;18064:47;18125:131;18251:4;18125:131;;;18117:139;;18021:245;;;;18273:416;;18473:2;18462:9;18458:18;18450:26;;18523:9;18517:4;18513:20;18509:1;18498:9;18494:17;18487:47;18548:131;18674:4;18548:131;;;18540:139;;18444:245;;;;18696:416;;18896:2;18885:9;18881:18;18873:26;;18946:9;18940:4;18936:20;18932:1;18921:9;18917:17;18910:47;18971:131;19097:4;18971:131;;;18963:139;;18867:245;;;;19119:416;;19319:2;19308:9;19304:18;19296:26;;19369:9;19363:4;19359:20;19355:1;19344:9;19340:17;19333:47;19394:131;19520:4;19394:131;;;19386:139;;19290:245;;;;19542:416;;19742:2;19731:9;19727:18;19719:26;;19792:9;19786:4;19782:20;19778:1;19767:9;19763:17;19756:47;19817:131;19943:4;19817:131;;;19809:139;;19713:245;;;;19965:416;;20165:2;20154:9;20150:18;20142:26;;20215:9;20209:4;20205:20;20201:1;20190:9;20186:17;20179:47;20240:131;20366:4;20240:131;;;20232:139;;20136:245;;;;20388:416;;20588:2;20577:9;20573:18;20565:26;;20638:9;20632:4;20628:20;20624:1;20613:9;20609:17;20602:47;20663:131;20789:4;20663:131;;;20655:139;;20559:245;;;;20811:416;;21011:2;21000:9;20996:18;20988:26;;21061:9;21055:4;21051:20;21047:1;21036:9;21032:17;21025:47;21086:131;21212:4;21086:131;;;21078:139;;20982:245;;;;21234:416;;21434:2;21423:9;21419:18;21411:26;;21484:9;21478:4;21474:20;21470:1;21459:9;21455:17;21448:47;21509:131;21635:4;21509:131;;;21501:139;;21405:245;;;;21657:416;;21857:2;21846:9;21842:18;21834:26;;21907:9;21901:4;21897:20;21893:1;21882:9;21878:17;21871:47;21932:131;22058:4;21932:131;;;21924:139;;21828:245;;;;22080:416;;22280:2;22269:9;22265:18;22257:26;;22330:9;22324:4;22320:20;22316:1;22305:9;22301:17;22294:47;22355:131;22481:4;22355:131;;;22347:139;;22251:245;;;;22503:416;;22703:2;22692:9;22688:18;22680:26;;22753:9;22747:4;22743:20;22739:1;22728:9;22724:17;22717:47;22778:131;22904:4;22778:131;;;22770:139;;22674:245;;;;22926:416;;23126:2;23115:9;23111:18;23103:26;;23176:9;23170:4;23166:20;23162:1;23151:9;23147:17;23140:47;23201:131;23327:4;23201:131;;;23193:139;;23097:245;;;;23349:222;;23476:2;23465:9;23461:18;23453:26;;23490:71;23558:1;23547:9;23543:17;23534:6;23490:71;;;23447:124;;;;;23578:256;;23640:2;23634:9;23624:19;;23678:4;23670:6;23666:17;23777:6;23765:10;23762:22;23741:18;23729:10;23726:34;23723:62;23720:2;;;23798:1;23795;23788:12;23720:2;23818:10;23814:2;23807:22;23618:216;;;;;23841:321;;23984:18;23976:6;23973:30;23970:2;;;24016:1;24013;24006:12;23970:2;24083:4;24079:9;24072:4;24064:6;24060:17;24056:33;24048:41;;24147:4;24141;24137:15;24129:23;;23907:255;;;;24169:322;;24313:18;24305:6;24302:30;24299:2;;;24345:1;24342;24335:12;24299:2;24412:4;24408:9;24401:4;24393:6;24389:17;24385:33;24377:41;;24476:4;24470;24466:15;24458:23;;24236:255;;;;24498:158;;24566:3;24558:11;;24603:3;24600:1;24593:14;24635:4;24632:1;24622:18;24614:26;;24552:104;;;;24663:121;;24756:5;24750:12;24740:22;;24721:63;;;;24791:122;;24885:5;24879:12;24869:22;;24850:63;;;;24921:162;;25035:6;25030:3;25023:19;25072:4;25067:3;25063:14;25048:29;;25016:67;;;;;25092:144;;25227:3;25212:18;;25205:31;;;;;25245:163;;25360:6;25355:3;25348:19;25397:4;25392:3;25388:14;25373:29;;25341:67;;;;;25417:145;;25553:3;25538:18;;25531:31;;;;;25570:91;;25632:24;25650:5;25632:24;;;25621:35;;25615:46;;;;25668:99;;25738:24;25756:5;25738:24;;;25727:35;;25721:46;;;;25774:85;;25847:5;25840:13;25833:21;25822:32;;25816:43;;;;25866:144;;25938:66;25931:5;25927:78;25916:89;;25910:100;;;;26017:121;;26090:42;26083:5;26079:54;26068:65;;26062:76;;;;26145:72;;26207:5;26196:16;;26190:27;;;;26225:145;26306:6;26301:3;26296;26283:30;26362:1;26353:6;26348:3;26344:16;26337:27;26276:94;;;;26379:268;26444:1;26451:101;26465:6;26462:1;26459:13;26451:101;;;26541:1;26536:3;26532:11;26526:18;26522:1;26517:3;26513:11;26506:39;26487:2;26484:1;26480:10;26475:15;;26451:101;;;26567:6;26564:1;26561:13;26558:2;;;26632:1;26623:6;26618:3;26614:16;26607:27;26558:2;26428:219;;;;;26655:97;;26743:2;26739:7;26734:2;26727:5;26723:14;26719:28;26709:38;;26703:49;;;;26760:117;26829:24;26847:5;26829:24;;;26822:5;26819:35;26809:2;;26868:1;26865;26858:12;26809:2;26803:74;;26884:111;26950:21;26965:5;26950:21;;;26943:5;26940:32;26930:2;;26986:1;26983;26976:12;26930:2;26924:71;;27002:115;27070:23;27087:5;27070:23;;;27063:5;27060:34;27050:2;;27108:1;27105;27098:12;27050:2;27044:73;;27124:117;27193:24;27211:5;27193:24;;;27186:5;27183:35;27173:2;;27232:1;27229;27222:12;27173:2;27167:74;",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./ERC721.sol\";\r\n\r\ncontract ColorToken is ERC721 {\r\n\tstring[] public colors;\r\nmapping(string=>bool) _colorExists;\r\nconstructor () ERC721(\"ColorToken\",\"CT\") public {\r\n\t}\r\n\t// E.G. color=\"#FFFFFF\"\r\n\tfunction mint(string memory _color) public {\r\n\t\t//require unique color\r\n\t\trequire(_colorExists[_color]==false,\"Color token already exists\");\r\n\t\tcolors.push(_color);\r\n\t\tuint _id = colors.length - 1;\r\n\t\t_mint(msg.sender, _id);\r\n\t\t_colorExists[_color] = true;\r\n\t\t//Call the mint function\r\n\t\t//Track it\r\n\t}\r\n}",
  "sourcePath": "C:\\Users\\Aditi Sharma\\Documents\\Blockchain\\smart contract essentials\\nft_Color\\contracts\\ColorToken.sol",
  "ast": {
    "absolutePath": "/C/Users/Aditi Sharma/Documents/Blockchain/smart contract essentials/nft_Color/contracts/ColorToken.sol",
    "exportedSymbols": {
      "ColorToken": [
        61
      ]
    },
    "id": 62,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "60:33:0"
      },
      {
        "absolutePath": "/C/Users/Aditi Sharma/Documents/Blockchain/smart contract essentials/nft_Color/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 62,
        "sourceUnit": 2468,
        "src": "97:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2467,
              "src": "146:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2467",
                "typeString": "contract ERC721"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "146:6:0"
          }
        ],
        "contractDependencies": [
          88,
          99,
          213,
          238,
          267,
          339,
          2467
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 61,
        "linearizedBaseContracts": [
          61,
          2467,
          267,
          238,
          213,
          339,
          99,
          88
        ],
        "name": "ColorToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "bd11f69d",
            "id": 8,
            "mutability": "mutable",
            "name": "colors",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 61,
            "src": "157:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
              "typeString": "string[]"
            },
            "typeName": {
              "baseType": {
                "id": 6,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "157:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "id": 7,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "157:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                "typeString": "string[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12,
            "mutability": "mutable",
            "name": "_colorExists",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 61,
            "src": "182:34:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
              "typeString": "mapping(string => bool)"
            },
            "typeName": {
              "id": 11,
              "keyType": {
                "id": 9,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "190:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "182:21:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                "typeString": "mapping(string => bool)"
              },
              "valueType": {
                "id": 10,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "198:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 19,
              "nodeType": "Block",
              "src": "267:5:0",
              "statements": []
            },
            "documentation": null,
            "id": 20,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "436f6c6f72546f6b656e",
                    "id": 15,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "241:12:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1c1be7663afc0b5f4ae883db18f27c55d9e6fd2fef4d132e48f4d2393e00c828",
                      "typeString": "literal_string \"ColorToken\""
                    },
                    "value": "ColorToken"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "4354",
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "254:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b0ae267f5886f41f13af4b185dfccc0c901c3b3efe1f44065fbb41d74159fc76",
                      "typeString": "literal_string \"CT\""
                    },
                    "value": "CT"
                  }
                ],
                "id": 17,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 14,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2467,
                  "src": "234:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$2467_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "234:25:0"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "231:2:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "267:0:0"
            },
            "scope": 61,
            "src": "219:53:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 59,
              "nodeType": "Block",
              "src": "344:259:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 26,
                            "name": "_colorExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "383:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                              "typeString": "mapping(string memory => bool)"
                            }
                          },
                          "id": 28,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 27,
                            "name": "_color",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22,
                            "src": "396:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "383:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 29,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "405:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "383:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "436f6c6f7220746f6b656e20616c726561647920657869737473",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "411:28:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_830e5116de0af7b92d4066ba9f1780ae8f32306edf79be2bd8fdfb4580d6cb21",
                          "typeString": "literal_string \"Color token already exists\""
                        },
                        "value": "Color token already exists"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_830e5116de0af7b92d4066ba9f1780ae8f32306edf79be2bd8fdfb4580d6cb21",
                          "typeString": "literal_string \"Color token already exists\""
                        }
                      ],
                      "id": 25,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "375:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "375:65:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "375:65:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 37,
                        "name": "_color",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22,
                        "src": "457:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 34,
                        "name": "colors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "445:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                          "typeString": "string storage ref[] storage ref"
                        }
                      },
                      "id": 36,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "445:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_string_storage_$returns$__$",
                        "typeString": "function (string storage ref)"
                      }
                    },
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "445:19:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39,
                  "nodeType": "ExpressionStatement",
                  "src": "445:19:0"
                },
                {
                  "assignments": [
                    41
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 41,
                      "mutability": "mutable",
                      "name": "_id",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 59,
                      "src": "469:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 40,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "469:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 46,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 45,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 42,
                        "name": "colors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "480:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                          "typeString": "string storage ref[] storage ref"
                        }
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "480:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 44,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "496:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "480:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "469:28:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 48,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "508:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "508:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 50,
                        "name": "_id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "520:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 47,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2185,
                      "src": "502:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "502:22:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 52,
                  "nodeType": "ExpressionStatement",
                  "src": "502:22:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 57,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "_colorExists",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "529:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                          "typeString": "mapping(string memory => bool)"
                        }
                      },
                      "id": 55,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 54,
                        "name": "_color",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22,
                        "src": "542:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "529:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 56,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "552:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "529:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 58,
                  "nodeType": "ExpressionStatement",
                  "src": "529:27:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "d85d3d27",
            "id": 60,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 22,
                  "mutability": "mutable",
                  "name": "_color",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 60,
                  "src": "315:20:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 21,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "315:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "314:22:0"
            },
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "344:0:0"
            },
            "scope": 61,
            "src": "301:302:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 62,
        "src": "123:483:0"
      }
    ],
    "src": "35:571:0"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/Aditi Sharma/Documents/Blockchain/smart contract essentials/nft_Color/contracts/ColorToken.sol",
    "exportedSymbols": {
      "ColorToken": [
        61
      ]
    },
    "id": 62,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:0"
      },
      {
        "id": 2,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "60:33:0"
      },
      {
        "absolutePath": "/C/Users/Aditi Sharma/Documents/Blockchain/smart contract essentials/nft_Color/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 62,
        "sourceUnit": 2468,
        "src": "97:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2467,
              "src": "146:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2467",
                "typeString": "contract ERC721"
              }
            },
            "id": 5,
            "nodeType": "InheritanceSpecifier",
            "src": "146:6:0"
          }
        ],
        "contractDependencies": [
          88,
          99,
          213,
          238,
          267,
          339,
          2467
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 61,
        "linearizedBaseContracts": [
          61,
          2467,
          267,
          238,
          213,
          339,
          99,
          88
        ],
        "name": "ColorToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "bd11f69d",
            "id": 8,
            "mutability": "mutable",
            "name": "colors",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 61,
            "src": "157:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
              "typeString": "string[]"
            },
            "typeName": {
              "baseType": {
                "id": 6,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "157:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "id": 7,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "157:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                "typeString": "string[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 12,
            "mutability": "mutable",
            "name": "_colorExists",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 61,
            "src": "182:34:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
              "typeString": "mapping(string => bool)"
            },
            "typeName": {
              "id": 11,
              "keyType": {
                "id": 9,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "190:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "182:21:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                "typeString": "mapping(string => bool)"
              },
              "valueType": {
                "id": 10,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "198:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 19,
              "nodeType": "Block",
              "src": "267:5:0",
              "statements": []
            },
            "documentation": null,
            "id": 20,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "436f6c6f72546f6b656e",
                    "id": 15,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "241:12:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1c1be7663afc0b5f4ae883db18f27c55d9e6fd2fef4d132e48f4d2393e00c828",
                      "typeString": "literal_string \"ColorToken\""
                    },
                    "value": "ColorToken"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "4354",
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "254:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b0ae267f5886f41f13af4b185dfccc0c901c3b3efe1f44065fbb41d74159fc76",
                      "typeString": "literal_string \"CT\""
                    },
                    "value": "CT"
                  }
                ],
                "id": 17,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 14,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2467,
                  "src": "234:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$2467_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "234:25:0"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "231:2:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "267:0:0"
            },
            "scope": 61,
            "src": "219:53:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 59,
              "nodeType": "Block",
              "src": "344:259:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 26,
                            "name": "_colorExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "383:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                              "typeString": "mapping(string memory => bool)"
                            }
                          },
                          "id": 28,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 27,
                            "name": "_color",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22,
                            "src": "396:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "383:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 29,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "405:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "383:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "436f6c6f7220746f6b656e20616c726561647920657869737473",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "411:28:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_830e5116de0af7b92d4066ba9f1780ae8f32306edf79be2bd8fdfb4580d6cb21",
                          "typeString": "literal_string \"Color token already exists\""
                        },
                        "value": "Color token already exists"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_830e5116de0af7b92d4066ba9f1780ae8f32306edf79be2bd8fdfb4580d6cb21",
                          "typeString": "literal_string \"Color token already exists\""
                        }
                      ],
                      "id": 25,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "375:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "375:65:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "375:65:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 37,
                        "name": "_color",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22,
                        "src": "457:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 34,
                        "name": "colors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "445:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                          "typeString": "string storage ref[] storage ref"
                        }
                      },
                      "id": 36,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "445:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_string_storage_$returns$__$",
                        "typeString": "function (string storage ref)"
                      }
                    },
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "445:19:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 39,
                  "nodeType": "ExpressionStatement",
                  "src": "445:19:0"
                },
                {
                  "assignments": [
                    41
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 41,
                      "mutability": "mutable",
                      "name": "_id",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 59,
                      "src": "469:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 40,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "469:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 46,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 45,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 42,
                        "name": "colors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "480:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_storage_$dyn_storage",
                          "typeString": "string storage ref[] storage ref"
                        }
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "480:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 44,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "496:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "480:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "469:28:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 48,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "508:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "508:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 50,
                        "name": "_id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "520:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 47,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2185,
                      "src": "502:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "502:22:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 52,
                  "nodeType": "ExpressionStatement",
                  "src": "502:22:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 57,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 53,
                        "name": "_colorExists",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "529:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                          "typeString": "mapping(string memory => bool)"
                        }
                      },
                      "id": 55,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 54,
                        "name": "_color",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22,
                        "src": "542:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "529:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 56,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "552:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "529:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 58,
                  "nodeType": "ExpressionStatement",
                  "src": "529:27:0"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "d85d3d27",
            "id": 60,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 22,
                  "mutability": "mutable",
                  "name": "_color",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 60,
                  "src": "315:20:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 21,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "315:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "314:22:0"
            },
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "344:0:0"
            },
            "scope": 61,
            "src": "301:302:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 62,
        "src": "123:483:0"
      }
    ],
    "src": "35:571:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.9+commit.3e3065ac.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x11CefE9C830dDb9761668488068873dfFBf8Fe6e",
      "transactionHash": "0x7417adf1b52fa97dd13d9059864a45421765e8e7db74ebb6c1be60868e78ead6"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-06-08T04:11:30.582Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "name()": {
        "details": "Gets the token name.",
        "returns": {
          "_0": "string representing the token name"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "returns": {
          "_0": "string representing the token symbol"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner.",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list owned by the requested address"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \"\" | \"\" | \"\" | \"\" | \"token.uri/123\" | \"token.uri/123\" | \"token.uri/\" | \"123\" | \"token.uri/123\" | \"token.uri/\" | \"\" | \"token.uri/<tokenId>\" |=== Requirements: - `tokenId` must exist."
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract.",
        "returns": {
          "_0": "uint256 representing the total amount of tokens"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}